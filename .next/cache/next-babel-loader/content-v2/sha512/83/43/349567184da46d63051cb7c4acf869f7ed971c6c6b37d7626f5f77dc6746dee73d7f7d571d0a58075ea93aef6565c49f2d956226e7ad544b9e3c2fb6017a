{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\react\\\\next-js\\\\06-onwards-to-a-bigger-project-starting-project-next\\\\pages\\\\[meetupId]\\\\index.js\";\nimport React from 'react';\nimport { MongoClient } from \"mongodb\";\n\nfunction MeetUpDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetUpDetails // image={}\n  // title={}\n  // address={}\n  // description={}\n  , {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://alan:alan@cluster0.3m1inti.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://alan:alan@cluster0.3m1inti.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.findOne({\n    _id: meetupId\n  }).toArray();\n  client.close();\n  return {\n    props: {\n      image: meetups.image,\n      id: meetupId,\n      title: meetups.title,\n      address: meetups.address,\n      description: meetups.description\n    },\n    revalidate: 1\n  };\n}\nexport default MeetUpDetails;","map":{"version":3,"sources":["D:/react/next-js/06-onwards-to-a-bigger-project-starting-project-next/pages/[meetupId]/index.js"],"names":["React","MongoClient","MeetUpDetails","props","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","findOne","image","id","title","address","description","revalidate"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,SAA5B;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,sBACI,QAAC,aAAD,CACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACnC,QAAMC,MAAM,GAAG,MAAMJ,WAAW,CAACK,OAAZ,CAAoB,0FAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACHC,IAAAA,QAAQ,EAAE,KADP;AAEHC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAYC,MAAM,KAAK;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AAAV,KAAL,CAAlB;AAFJ,GAAP;AAIH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC1C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMf,MAAM,GAAG,MAAMJ,WAAW,CAACK,OAAZ,CAAoB,0FAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACgB,OAAlB,CAA0B;AAAEZ,IAAAA,GAAG,EAAEQ;AAAP,GAA1B,EAA6CP,OAA7C,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACHX,IAAAA,KAAK,EAAE;AACHsB,MAAAA,KAAK,EAAEf,OAAO,CAACe,KADZ;AAEHC,MAAAA,EAAE,EAAEN,QAFD;AAGHO,MAAAA,KAAK,EAAEjB,OAAO,CAACiB,KAHZ;AAIHC,MAAAA,OAAO,EAAElB,OAAO,CAACkB,OAJd;AAKHC,MAAAA,WAAW,EAAEnB,OAAO,CAACmB;AALlB,KADJ;AAQHC,IAAAA,UAAU,EAAE;AART,GAAP;AAUH;AAED,eAAe5B,aAAf","sourcesContent":["import React from 'react'\r\nimport { MongoClient } from \"mongodb\"\r\n\r\nfunction MeetUpDetails(props) {\r\n    return (\r\n        <MeetUpDetails\r\n        // image={}\r\n        // title={}\r\n        // address={}\r\n        // description={}\r\n        />\r\n    )\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n    const client = await MongoClient.connect('mongodb+srv://alan:alan@cluster0.3m1inti.mongodb.net/meetups?retryWrites=true&w=majority')\r\n    const db = client.db();\r\n\r\n    const meetupsCollection = db.collection('meetups')\r\n\r\n    const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray()\r\n    client.close()\r\n\r\n    return {\r\n        fallback: false,\r\n        paths: meetups.map(meetup => ({ params: { meetupId: meetup._id.toString() } }))\r\n    }\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n    const meetupId = context.params.meetupId\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://alan:alan@cluster0.3m1inti.mongodb.net/meetups?retryWrites=true&w=majority')\r\n    const db = client.db();\r\n\r\n    const meetupsCollection = db.collection('meetups')\r\n\r\n    const meetups = await meetupsCollection.findOne({ _id: meetupId }).toArray()\r\n    client.close()\r\n\r\n    return {\r\n        props: {\r\n            image: meetups.image,\r\n            id: meetupId,\r\n            title: meetups.title,\r\n            address: meetups.address,\r\n            description: meetups.description,\r\n        },\r\n        revalidate: 1\r\n    }\r\n}\r\n\r\nexport default MeetUpDetails"]},"metadata":{},"sourceType":"module"}