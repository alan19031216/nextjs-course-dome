{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\react\\\\next-js\\\\06-onwards-to-a-bigger-project-starting-project-next\\\\pages\\\\[meetupId]\\\\index.js\";\nimport React from 'react';\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nfunction MeetUpDetails(props) {\n  console.log(\"props\");\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(MeetUpDetails, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://alan:alan@cluster0.3m1inti.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://alan:alan@cluster0.3m1inti.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      // meetupData: {\n      //     id: selectedMeetup._id.toString(),\n      //     title: selectedMeetup.title,\n      //     address: selectedMeetup.address,\n      //     image: selectedMeetup.image,\n      //     description: selectedMeetup.description,\n      // },\n      meetupData: selectedMeetup\n    }\n  };\n}\nexport default MeetUpDetails;","map":{"version":3,"sources":["D:/react/next-js/06-onwards-to-a-bigger-project-starting-project-next/pages/[meetupId]/index.js"],"names":["React","MongoClient","ObjectId","MeetUpDetails","props","console","log","meetupData","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1BC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,sBACI,QAAC,aAAD;AACI,IAAA,KAAK,EAAEA,KAAK,CAACG,UAAN,CAAiBC,KAD5B;AAEI,IAAA,KAAK,EAAEJ,KAAK,CAACG,UAAN,CAAiBE,KAF5B;AAGI,IAAA,OAAO,EAAEL,KAAK,CAACG,UAAN,CAAiBG,OAH9B;AAII,IAAA,WAAW,EAAEN,KAAK,CAACG,UAAN,CAAiBI;AAJlC;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACnC,QAAMC,MAAM,GAAG,MAAMZ,WAAW,CAACa,OAAZ,CAAoB,0FAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACHC,IAAAA,QAAQ,EAAE,KADP;AAEHC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC5BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADoB,KAAb,CAAZ;AAFJ,GAAP;AAMH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC1C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMf,MAAM,GAAG,MAAMZ,WAAW,CAACa,OAAZ,CAAoB,0FAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AACnDb,IAAAA,GAAG,EAAElB,QAAQ,CAAC0B,QAAD;AADsC,GAA1B,CAA7B;AAIAf,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACHlB,IAAAA,KAAK,EAAE;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACAG,MAAAA,UAAU,EAAEyB;AART;AADJ,GAAP;AAYH;AAED,eAAe7B,aAAf","sourcesContent":["import React from 'react'\r\nimport { MongoClient, ObjectId } from \"mongodb\"\r\n\r\nfunction MeetUpDetails(props) {\r\n    console.log(\"props\")\r\n    console.log(props)\r\n    return (\r\n        <MeetUpDetails\r\n            image={props.meetupData.image}\r\n            title={props.meetupData.title}\r\n            address={props.meetupData.address}\r\n            description={props.meetupData.description}\r\n        />\r\n    )\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n    const client = await MongoClient.connect('mongodb+srv://alan:alan@cluster0.3m1inti.mongodb.net/meetups?retryWrites=true&w=majority')\r\n    const db = client.db();\r\n\r\n    const meetupsCollection = db.collection('meetups')\r\n\r\n    const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray()\r\n    client.close()\r\n\r\n    return {\r\n        fallback: false,\r\n        paths: meetups.map((meetup) => ({\r\n            params: { meetupId: meetup._id.toString() },\r\n        })),\r\n    };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n    const meetupId = context.params.meetupId\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://alan:alan@cluster0.3m1inti.mongodb.net/meetups?retryWrites=true&w=majority')\r\n    const db = client.db();\r\n\r\n    const meetupsCollection = db.collection('meetups')\r\n\r\n    const selectedMeetup = await meetupsCollection.findOne({\r\n        _id: ObjectId(meetupId),\r\n    });\r\n\r\n    client.close()\r\n\r\n    return {\r\n        props: {\r\n            // meetupData: {\r\n            //     id: selectedMeetup._id.toString(),\r\n            //     title: selectedMeetup.title,\r\n            //     address: selectedMeetup.address,\r\n            //     image: selectedMeetup.image,\r\n            //     description: selectedMeetup.description,\r\n            // },\r\n            meetupData: selectedMeetup\r\n        },\r\n    };\r\n}\r\n\r\nexport default MeetUpDetails"]},"metadata":{},"sourceType":"module"}